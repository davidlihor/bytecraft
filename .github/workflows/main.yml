name: ByteCraft Actions
on:
  workflow_dispatch:
  push:
    branches:
      - main
env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: bytecraft-app
  EKS_CLUSTER: bytecraft-eks

jobs:
  test-and-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Code checkout
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Install Git LFS
        run: |
          git lfs install

      - name: Create list of LFS objects
        id: list-lfs
        run: |
          git lfs ls-files -l | awk '{print $2}' | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: |
            .git/lfs/objects
            .git/lfs/tmp
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Pull LFS objects
        run: |
          git lfs pull

      - name: Maven test
        working-directory: ./app
        run: mvn test

      - name: Checkstyle
        working-directory: ./app
        run: mvn checkstyle:checkstyle

      - name: Set Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Setup SonarQube
        uses: warchant/setup-sonar-scanner@v7

      - name: SonarQube Scan
        run: |
          sonar-scanner \
            -Dsonar.host.url=${{ secrets.SONAR_URL }} \
            -Dsonar.login=${{ secrets.SONAR_TOKEN }} \
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} \
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} \
            -Dsonar.sources=app/src/ \
            -Dsonar.junit.reportsPath=app/target/surefire-reports/ \
            -Dsonar.jacoco.reportsPath=app/target/jacoco.exec \
            -Dsonar.java.checkstyle.reportPaths=app/target/checkstyle-result.xml \
            -Dsonar.java.binaries=app/target/test-classes/com/bytecraft/account/controllerTest/

      - name: SonarQube Quality Gate Check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        timeout-minutes: 3
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_URL }}

  build-and-publish:
    needs: test-and-scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          lfs: true
          fetch-depth: 0

      - name: Install Git LFS
        run: |
          git lfs install

      - name: Create list of LFS objects
        id: list-lfs
        run: |
          git lfs ls-files -l | awk '{print $2}' | sort > .lfs-assets-id

      - name: Restore LFS cache
        uses: actions/cache@v3
        id: lfs-cache
        with:
          path: |
            .git/lfs/objects
            .git/lfs/tmp
          key: ${{ runner.os }}-lfs-${{ hashFiles('.lfs-assets-id') }}-v1
          restore-keys: |
            ${{ runner.os }}-lfs-

      - name: Pull LFS objects
        run: |
          git lfs pull

      - name: Build and Upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          repo: ${{ env.ECR_REPOSITORY }}
          region: ${{ env.AWS_REGION }}
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./docker/app/Dockerfile
          context: .
